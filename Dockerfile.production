# Multi-stage Dockerfile for Production Deployment
# Nino Medical AI - Italian Medical NER

# Build stage
FROM python:3.11.7-slim as builder

# Set build arguments
ARG DEBIAN_FRONTEND=noninteractive

# Install build dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    make \
    cmake \
    wget \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements files
COPY requirements.txt web_demo_requirements.txt api_requirements.txt ./

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir wheel && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir -r web_demo_requirements.txt && \
    pip install --no-cache-dir -r api_requirements.txt && \
    pip install --no-cache-dir streamlit fastapi uvicorn gunicorn redis psycopg2-binary

# Production stage
FROM python:3.11.7-slim as production

# Set production arguments
ARG DEBIAN_FRONTEND=noninteractive
ARG APP_USER=ninomed
ARG APP_GROUP=ninomed
ARG APP_UID=1000
ARG APP_GID=1000

# Install runtime dependencies only
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -g ${APP_GID} ${APP_GROUP} && \
    useradd -u ${APP_UID} -g ${APP_GID} -m -s /bin/bash ${APP_USER}

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application files with proper ownership
COPY --chown=${APP_USER}:${APP_GROUP} . .

# Create necessary directories
RUN mkdir -p logs config ssl && \
    chown -R ${APP_USER}:${APP_GROUP} /app

# Create startup script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Function to start Streamlit\n\
start_streamlit() {\n\
    echo "Starting Streamlit Web Demo..."\n\
    exec streamlit run web_demo_app.py \\\n\
        --server.port=8501 \\\n\
        --server.address=0.0.0.0 \\\n\
        --server.headless=true \\\n\
        --server.enableCORS=false \\\n\
        --server.enableXsrfProtection=true \\\n\
        --logger.level=info\n\
}\n\
\n\
# Function to start FastAPI\n\
start_api() {\n\
    echo "Starting FastAPI Service..."\n\
    if [ "$ENVIRONMENT" = "production" ]; then\n\
        exec gunicorn api_service:app \\\n\
            -w ${WORKERS:-4} \\\n\
            -k uvicorn.workers.UvicornWorker \\\n\
            --bind 0.0.0.0:8000 \\\n\
            --timeout 120 \\\n\
            --access-logfile - \\\n\
            --error-logfile -\n\
    else\n\
        exec uvicorn api_service:app \\\n\
            --host 0.0.0.0 \\\n\
            --port 8000 \\\n\
            --log-level info\n\
    fi\n\
}\n\
\n\
# Determine which service to start based on command\n\
case "$1" in\n\
    streamlit)\n\
        start_streamlit\n\
        ;;\n\
    api)\n\
        start_api\n\
        ;;\n\
    *)\n\
        # Default to Streamlit if no command specified\n\
        start_streamlit\n\
        ;;\n\
esac\n\
' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh && \
    chown ${APP_USER}:${APP_GROUP} /app/entrypoint.sh

# Switch to non-root user
USER ${APP_USER}

# Expose ports
EXPOSE 8501 8000

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8501/_stcore/health || curl -f http://localhost:8000/health || exit 1

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV ENVIRONMENT=production

# Use entrypoint script
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["streamlit"]
